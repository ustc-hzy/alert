// Code generated by Kitex v0.2.0. DO NOT EDIT.

package crud

import (
	"alert/kitex_gen/api"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return cRUDServiceInfo
}

var cRUDServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CRUD"
	handlerType := (*api.CRUD)(nil)
	methods := map[string]kitex.MethodInfo{
		"addIndicator":    kitex.NewMethodInfo(addIndicatorHandler, newCRUDAddIndicatorArgs, newCRUDAddIndicatorResult, false),
		"deleteIndicator": kitex.NewMethodInfo(deleteIndicatorHandler, newCRUDDeleteIndicatorArgs, newCRUDDeleteIndicatorResult, false),
		"queryIndicator":  kitex.NewMethodInfo(queryIndicatorHandler, newCRUDQueryIndicatorArgs, newCRUDQueryIndicatorResult, false),
		"modifyIndicator": kitex.NewMethodInfo(modifyIndicatorHandler, newCRUDModifyIndicatorArgs, newCRUDModifyIndicatorResult, false),
		"addRule":         kitex.NewMethodInfo(addRuleHandler, newCRUDAddRuleArgs, newCRUDAddRuleResult, false),
		"deleteRule":      kitex.NewMethodInfo(deleteRuleHandler, newCRUDDeleteRuleArgs, newCRUDDeleteRuleResult, false),
		"queryRule":       kitex.NewMethodInfo(queryRuleHandler, newCRUDQueryRuleArgs, newCRUDQueryRuleResult, false),
		"modifyRule":      kitex.NewMethodInfo(modifyRuleHandler, newCRUDModifyRuleArgs, newCRUDModifyRuleResult, false),
		"addTask":         kitex.NewMethodInfo(addTaskHandler, newCRUDAddTaskArgs, newCRUDAddTaskResult, false),
		"deleteTask":      kitex.NewMethodInfo(deleteTaskHandler, newCRUDDeleteTaskArgs, newCRUDDeleteTaskResult, false),
		"queryTask":       kitex.NewMethodInfo(queryTaskHandler, newCRUDQueryTaskArgs, newCRUDQueryTaskResult, false),
		"modifyTask":      kitex.NewMethodInfo(modifyTaskHandler, newCRUDModifyTaskArgs, newCRUDModifyTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func addIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDAddIndicatorArgs)
	realResult := result.(*api.CRUDAddIndicatorResult)
	success, err := handler.(api.CRUD).AddIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDAddIndicatorArgs() interface{} {
	return api.NewCRUDAddIndicatorArgs()
}

func newCRUDAddIndicatorResult() interface{} {
	return api.NewCRUDAddIndicatorResult()
}

func deleteIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDDeleteIndicatorArgs)
	realResult := result.(*api.CRUDDeleteIndicatorResult)
	success, err := handler.(api.CRUD).DeleteIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDDeleteIndicatorArgs() interface{} {
	return api.NewCRUDDeleteIndicatorArgs()
}

func newCRUDDeleteIndicatorResult() interface{} {
	return api.NewCRUDDeleteIndicatorResult()
}

func queryIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDQueryIndicatorArgs)
	realResult := result.(*api.CRUDQueryIndicatorResult)
	success, err := handler.(api.CRUD).QueryIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDQueryIndicatorArgs() interface{} {
	return api.NewCRUDQueryIndicatorArgs()
}

func newCRUDQueryIndicatorResult() interface{} {
	return api.NewCRUDQueryIndicatorResult()
}

func modifyIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDModifyIndicatorArgs)
	realResult := result.(*api.CRUDModifyIndicatorResult)
	success, err := handler.(api.CRUD).ModifyIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDModifyIndicatorArgs() interface{} {
	return api.NewCRUDModifyIndicatorArgs()
}

func newCRUDModifyIndicatorResult() interface{} {
	return api.NewCRUDModifyIndicatorResult()
}

func addRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDAddRuleArgs)
	realResult := result.(*api.CRUDAddRuleResult)
	success, err := handler.(api.CRUD).AddRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDAddRuleArgs() interface{} {
	return api.NewCRUDAddRuleArgs()
}

func newCRUDAddRuleResult() interface{} {
	return api.NewCRUDAddRuleResult()
}

func deleteRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDDeleteRuleArgs)
	realResult := result.(*api.CRUDDeleteRuleResult)
	success, err := handler.(api.CRUD).DeleteRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDDeleteRuleArgs() interface{} {
	return api.NewCRUDDeleteRuleArgs()
}

func newCRUDDeleteRuleResult() interface{} {
	return api.NewCRUDDeleteRuleResult()
}

func queryRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDQueryRuleArgs)
	realResult := result.(*api.CRUDQueryRuleResult)
	success, err := handler.(api.CRUD).QueryRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDQueryRuleArgs() interface{} {
	return api.NewCRUDQueryRuleArgs()
}

func newCRUDQueryRuleResult() interface{} {
	return api.NewCRUDQueryRuleResult()
}

func modifyRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDModifyRuleArgs)
	realResult := result.(*api.CRUDModifyRuleResult)
	success, err := handler.(api.CRUD).ModifyRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDModifyRuleArgs() interface{} {
	return api.NewCRUDModifyRuleArgs()
}

func newCRUDModifyRuleResult() interface{} {
	return api.NewCRUDModifyRuleResult()
}

func addTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDAddTaskArgs)
	realResult := result.(*api.CRUDAddTaskResult)
	success, err := handler.(api.CRUD).AddTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDAddTaskArgs() interface{} {
	return api.NewCRUDAddTaskArgs()
}

func newCRUDAddTaskResult() interface{} {
	return api.NewCRUDAddTaskResult()
}

func deleteTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDDeleteTaskArgs)
	realResult := result.(*api.CRUDDeleteTaskResult)
	success, err := handler.(api.CRUD).DeleteTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDDeleteTaskArgs() interface{} {
	return api.NewCRUDDeleteTaskArgs()
}

func newCRUDDeleteTaskResult() interface{} {
	return api.NewCRUDDeleteTaskResult()
}

func queryTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDQueryTaskArgs)
	realResult := result.(*api.CRUDQueryTaskResult)
	success, err := handler.(api.CRUD).QueryTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDQueryTaskArgs() interface{} {
	return api.NewCRUDQueryTaskArgs()
}

func newCRUDQueryTaskResult() interface{} {
	return api.NewCRUDQueryTaskResult()
}

func modifyTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CRUDModifyTaskArgs)
	realResult := result.(*api.CRUDModifyTaskResult)
	success, err := handler.(api.CRUD).ModifyTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCRUDModifyTaskArgs() interface{} {
	return api.NewCRUDModifyTaskArgs()
}

func newCRUDModifyTaskResult() interface{} {
	return api.NewCRUDModifyTaskResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddIndicator(ctx context.Context, req *api.AddIndicatorRequest) (r *api.AddIndicatorResponse, err error) {
	var _args api.CRUDAddIndicatorArgs
	_args.Req = req
	var _result api.CRUDAddIndicatorResult
	if err = p.c.Call(ctx, "addIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIndicator(ctx context.Context, req *api.DeleteIndicatorRequest) (r *api.DeleteIndicatorResponse, err error) {
	var _args api.CRUDDeleteIndicatorArgs
	_args.Req = req
	var _result api.CRUDDeleteIndicatorResult
	if err = p.c.Call(ctx, "deleteIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryIndicator(ctx context.Context, req *api.QueryIndicatorRequest) (r *api.QueryIndicatorResponse, err error) {
	var _args api.CRUDQueryIndicatorArgs
	_args.Req = req
	var _result api.CRUDQueryIndicatorResult
	if err = p.c.Call(ctx, "queryIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyIndicator(ctx context.Context, req *api.ModifyIndicatorRequest) (r *api.ModifyIndicatorResponse, err error) {
	var _args api.CRUDModifyIndicatorArgs
	_args.Req = req
	var _result api.CRUDModifyIndicatorResult
	if err = p.c.Call(ctx, "modifyIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddRule(ctx context.Context, req *api.AddRuleRequest) (r *api.AddRuleResponse, err error) {
	var _args api.CRUDAddRuleArgs
	_args.Req = req
	var _result api.CRUDAddRuleResult
	if err = p.c.Call(ctx, "addRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRule(ctx context.Context, req *api.DeleteRuleRequest) (r *api.DeleteRuleResponse, err error) {
	var _args api.CRUDDeleteRuleArgs
	_args.Req = req
	var _result api.CRUDDeleteRuleResult
	if err = p.c.Call(ctx, "deleteRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryRule(ctx context.Context, req *api.QueryRuleRequest) (r *api.QueryRuleResponse, err error) {
	var _args api.CRUDQueryRuleArgs
	_args.Req = req
	var _result api.CRUDQueryRuleResult
	if err = p.c.Call(ctx, "queryRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyRule(ctx context.Context, req *api.ModifyRuleRequest) (r *api.ModifyRuleResponse, err error) {
	var _args api.CRUDModifyRuleArgs
	_args.Req = req
	var _result api.CRUDModifyRuleResult
	if err = p.c.Call(ctx, "modifyRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTask(ctx context.Context, req *api.AddTaskRequest) (r *api.AddTaskResponse, err error) {
	var _args api.CRUDAddTaskArgs
	_args.Req = req
	var _result api.CRUDAddTaskResult
	if err = p.c.Call(ctx, "addTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTask(ctx context.Context, req *api.DeleteTaskRequest) (r *api.DeleteTaskResponse, err error) {
	var _args api.CRUDDeleteTaskArgs
	_args.Req = req
	var _result api.CRUDDeleteTaskResult
	if err = p.c.Call(ctx, "deleteTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryTask(ctx context.Context, req *api.QueryTaskRequest) (r *api.QueryTaskResponse, err error) {
	var _args api.CRUDQueryTaskArgs
	_args.Req = req
	var _result api.CRUDQueryTaskResult
	if err = p.c.Call(ctx, "queryTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyTask(ctx context.Context, req *api.ModifyTaskRequest) (r *api.ModifyTaskResponse, err error) {
	var _args api.CRUDModifyTaskArgs
	_args.Req = req
	var _result api.CRUDModifyTaskResult
	if err = p.c.Call(ctx, "modifyTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
