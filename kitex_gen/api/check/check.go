// Code generated by Kitex v0.0.8. DO NOT EDIT.

package check

import (
	"alert/kitex_gen/api"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return checkServiceInfo
}

var checkServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Check"
	handlerType := (*api.Check)(nil)
	methods := map[string]kitex.MethodInfo{
		"check": kitex.NewMethodInfo(checkHandler, newCheckCheckArgs, newCheckCheckResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func checkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CheckCheckArgs)
	realResult := result.(*api.CheckCheckResult)
	success, err := handler.(api.Check).Check(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCheckCheckArgs() interface{} {
	return api.NewCheckCheckArgs()
}

func newCheckCheckResult() interface{} {
	return api.NewCheckCheckResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Check(ctx context.Context, req *api.CheckRequest) (r *api.CheckResponse, err error) {
	var _args api.CheckCheckArgs
	_args.Req = req
	var _result api.CheckCheckResult
	if err = p.c.Call(ctx, "check", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
